#!/usr/bin/env bash

progress() {
    printf "\e[2K\e[33m %s\e[0m\r" "$1"
}

warning() {
    printf "\e[2K\e[31m %s\e[0m\n" "$1"
}

completed() {
    printf "\e[2K\e[32m %s\e[0m\n" "$1"
}

make_directory() {
    progress "Create directory $1"
    mkdir -p "$1"
}

start_user_service() {
    progress "Start $1"
    systemctl enable --user "$1" >/dev/null
    systemctl restart --user "$1"
}

pin_neovim_plugin() {
    cd "$HOME/.local/share/nvim/plugged/$1"
    git checkout "$2"
    progress "Pinning neovim plugin $1 to SHA $2"
}

progress "Install dependencies"
yay -S --needed < ./dependencies
completed "Install dependencies"

progress "Setting env vars"
SCRIPTPATH="$( cd "$(dirname "$0")" || exit 1 ; pwd -P )"
COUNT=0
FILE_CNT=$(find lib ! -path lib -type f | wc -l)
completed "Setting env vars"

# Required paths for vim and mpd
make_directory ~/.vim/tmp/undo
make_directory ~/.vim/tmp/backup
make_directory ~/.vim/tmp/swap
make_directory ~/.config/mpd/res
make_directory ~/.config/mpd/res/playlists
completed "Make directories"

progress "Create MPD log"
touch ~/.config/mpd/log
completed "Create MPD log"

# Symlink and backup all files in ./lib
find lib ! -path lib -type f | while read -r FILE; do
    FILE=${FILE:4}
    DIR=$(dirname "$HOME/$FILE")
    BACKUPFILE="$SCRIPTPATH/back/$FILE"
    BACKUPDIR=$(dirname "$SCRIPTPATH/back/$FILE")

    mkdir -p "$DIR"
    mkdir -p "$BACKUPDIR"

    if [ -f "$HOME/$FILE" ]; then
        cp "$HOME/$FILE" "$BACKUPFILE"
        rm "$HOME/$FILE"
    fi

    progress "Create file $HOME/$FILE"
    ln -s -f "$SCRIPTPATH/lib/$FILE" "$HOME/$FILE" >/dev/null 2>&1

    ((COUNT++))
done
completed "Update $FILE_CNT symlinks"

if command -v vim &> /dev/null; then
    progress "Setup vim plug"
    [[ -f ~/.vim/autoload/plug.vim ]] || curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    "$TERMINAL" -e "/usr/bin/vim +PlugInstall +PlugClean[!] +qall" >/dev/null 2>&1
    completed "Setup vim plug"

    progress "Update vim plugins"
    "$TERMINAL" -e "/usr/bin/vim +PlugUpdate +qall" >/dev/null 2>&1
    completed "Update vim plugins"
else
    warning "Vim installation not found. Skipping."
fi

if command -v nvim &> /dev/null; then
    progress "Setup nvim plug"
    [[ -f ~/.local/share/nvim/site/autoload/plug.vim ]] || curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    "$TERMINAL" -e "/usr/bin/nvim +PlugInstall +PlugClean[!] +qall" >/dev/null 2>&1
    completed "Setup nvim plug"

    #progress "Setup neovim language server protocol"
    #"$TERMINAL" -e "/usr/bin/nvim +LspInstall bashls +qall" >/dev/null 2>&1
    #"$TERMINAL" -e "/usr/bin/nvim +LspInstall gopls +qall" >/dev/null 2>&1
    #"$TERMINAL" -e "/usr/bin/nvim +LspInstall tsserver +qall" >/dev/null 2>&1
    #completed "Setup neovim language server protocol"

    progress "Installing treesitter configurations"
    "$TERMINAL" -e "/usr/bin/nvim +TSInstall all +qall" >/dev/null 2>&1
    completed "Installing treesitter configurations"

    progress "Update neovim plugins"
    "$TERMINAL" -e "/usr/bin/nvim +PlugUpdate +PlugClean[!] +qall">/dev/null 2>&1
    completed "Update neovim plugins"

    pin_neovim_plugin nvim-treesitter e5d8b6ad
else
    warning "Neovim installation not found. Skipping."
fi

if command -v zsh &> /dev/null; then
    progress "Setup oh-my-zsh"
    [[ -d ~/.config/.oh-my-zsh ]] || sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
    [[ -d ~/.config/.oh-my-zsh/custom/plugins/zsh-autosuggestions ]] || git clone https://github.com/zsh-users/zsh-autosuggestions ~/.config/.oh-my-zsh/custom/plugins/zsh-autosuggestions
    [[ -d ~/.config/.oh-my-zsh/custom/plugins/zsh-completions ]] || git clone https://github.com/zsh-users/zsh-completions ~/.config/.oh-my-zsh/custom/plugins/zsh-completions
    [[ -d ~/.config/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting ]] || git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.config/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
    completed "Setup oh-my-zsh"
else
    warning "ZSH installation not found. Skipping."
fi

# Update font cache.
progress "Setup fonts"
fc-cache
completed "Setup fonts"

if command -v mpc &> /dev/null; then
    MPD_PLAYING=0
    mpc | grep -q '\[playing\]' && MPD_PLAYING=1
else
    warning "mpc installation not found. Skipping."
fi

if [ $MPD_PLAYING -eq 1 ]; then
    mpc -q toggle
fi

# Setup user services.
start_user_service "synccal.timer"
start_user_service "syncmail.timer"
start_user_service "sync_music.timer"
start_user_service "mpd.service"
start_user_service "bing-wallpaper.service"
start_user_service "mbsync.timer"
start_user_service "offlineimap.service"
completed "Start user services"

# Restart polybar
progress "Updating polybar"
sh ~/.scripts/launch_polybar 1>/dev/null 2>/dev/null &
completed "Updating polybar"

# Rebuild and restart Xmonad.
progress "Building Xmonad"
xmonad --recompile > /dev/null 2>&1
xmonad --restart
completed "Building Xmonad"

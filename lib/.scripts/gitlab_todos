#!/bin/sh

TOKEN="$(cat "$HOME/.cache/gitlab-access-token")"
CACHE_FILE="$HOME/.cache/gitlab_todos_raw"
CACHED_RESULT="$HOME/.cache/gitlab_merge_requests_last_result"
BASE_DOMAIN="https://$(jq <"$HOME/.cache/siemens-config.json" '.gitlab_host')"
CACHE_REFRESH_SECONDS=60
GITLAB_USERNAME="ASK"

download_file() {
    curl -s "${BASE_DOMAIN}/api/v4/todos?private_token=${TOKEN}" | jq >"$CACHE_FILE"
}

display_notification() {
    echo "$1"
    echo "$2"
    echo "=="
    #filename=$(echo "$2" | sha256sum | sed 's/ .*$//')
    #echo "curl -fL -H \"Authorization: Bearer $TOKEN\" --output /tmp/$filename.png $2"
    #curl -sfL -H "Authorization: Bearer $TOKEN" --output "/tmp/$filename.png" "$2"
    #echo "/tmp/$filename.png"
    #notify-send -u normal -i "/tmp/$filename.png" "You have a new to-do"
}

if [ ! -f "${CACHE_FILE}" ]; then
    download_file
elif [ $(stat -c %Y "${CACHE_FILE}") -lt $(($(date +"%s") - ${CACHE_REFRESH_SECONDS})) ]; then
    download_file
fi

OUTPUT=$(cat "$CACHE_FILE" | jq -rc '.[] | "\(.id) \(.author.avatar_url)"')
for args in $OUTPUT; do
    display_notification $args
done

echo "$OUTPUT"

exit
if [ ! -f "${CACHED_RESULT}" ]; then
    LAST_RESULT="0"
else
    LAST_RESULT="$(cat "${CACHED_RESULT}")"
fi
if [ "${LAST_RESULT}" -lt "${OUTPUT}" ]; then
    for args in $(cat "${CACHE_FILE}" | jq -rc '.[] | "(\(.id) \(.author.avatar_url))"'); do
        echo $args | xargs display_notification
    done
fi

echo "${OUTPUT}" >"${CACHED_RESULT}"

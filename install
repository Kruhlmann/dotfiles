#!/usr/bin/env bash

set -xe

install_scripts_completed=""

depends_on() {
  # shellcheck disable=SC2046
  if [ $(command -v yay) ]; then
    # shellcheck disable=SC2068
    yay -S --noconfirm --needed $@
  else
    # shellcheck disable=SC2068
    sudo pacman -S --noconfirm --needed $@
  fi
}

run_install_script() {
  if [ -f "./install.d/$1.sh" ]; then
    start="$(date +%s)"
    if ! echo "$install_scripts_completed" | grep -q "$1"; then
      error=""
      # shellcheck disable=SC1090
      . "./install.d/$1.sh"

      if needs_install; then
        setup 2>&1 | ./lib/.scripts/show_output "$1" || error="(setup failed)"
        postinstall 2>&1 | ./lib/.scripts/show_output "$1" || error="(postinstall failed)"
      fi

      install_scripts_completed="$install_scripts_completed $1"

      end="$(date +%s)"
      if [ -z "$error" ]; then
        printf '\033[2K\e[0;36m[✓] %s (%d s)\e[0;0m\n' "$1" "$((end - start))"
      else
        printf '\033[2K\e[0;31m[x] %s (%d s)\e[0;0m %s\n' "$1" "$((end - start))" "$error"
      fi
    fi
  else
    echo "No such file ./install.d/$1.sh"
  fi
}

pre_install() {
  for file in "$@"; do
    run_install_script "$file"
  done
}

insecure_prompt() {
  printf '%s' "$1" >/dev/stderr
  read -r SECURESTRING
  printf '%s' "$SECURESTRING"
}

secure_prompt() {
  printf '%s' "$1" >/dev/stderr
  stty -echo
  read -r SECURESTRING
  stty echo
  printf '\n' >/dev/stderr
  printf '%s' "$SECURESTRING"
}

bw_unlock() {
  BW_SESSION=$(bw <"$HOME/.cache/bw/pass" unlock --raw 2>/dev/null)
  export BW_SESSION
}

bw_item() {
  test -z "$BW_SESSION" && bw_unlock
  bw get item "$(bw list items --search "$1" 2>/dev/null | jq '.[0].id' --raw-output)"
}

clone_homedir() {
  start="$(date +%s)"
  SCRIPTPATH="$(
    cd "$(dirname "$0")" || exit 1
    pwd -P
  )"
  find lib ! -path lib -type f | while read -r FILE; do
    FILE=${FILE:4}
    DIR=$(dirname "$HOME/$FILE")
    BACKUPFILE="$SCRIPTPATH/back/$FILE"
    BACKUPDIR=$(dirname "$SCRIPTPATH/back/$FILE")

    [ -d "$DIR" ] || mkdir -p "$DIR"
    [ -d "$BACKUPDIR" ] || mkdir -p "$BACKUPDIR"

    if [ -f "$HOME/$FILE" ]; then
      cp "$HOME/$FILE" "$BACKUPFILE"
      rm "$HOME/$FILE"
      echo "$HOME/$FILE"
    fi

    printf '\e[0;36m[ ] Setting up\e[0;0m %s                                \r' "$HOME/$FILE"
    ln -s -f "$SCRIPTPATH/lib/$FILE" "$HOME/$FILE" >/dev/null 2>&1
  done
  printf '\033[2K\e[0;36m[✓] Setting up file links\e[0;0m\n'
}

setup_vars() {
  mkdir -p ~/.cache/bw
  BW_USERNAME="$(cat "$HOME/.cache/bw/user" 2>/dev/null)"
  BW_PASSWD="$(cat "$HOME/.cache/bw/pass" 2>/dev/null)"
  BW_CLIENTSECRET="$(cat "$HOME/.cache/bw/secret" 2>/dev/null)"

  [ -z "$BW_USERNAME" ] && BW_USERNAME=$(insecure_prompt "Enter bitwarden username: ")
  [ -z "$BW_PASSWD" ] && BW_PASSWD=$(secure_prompt "Enter bitwarden password: ")
  [ -z "$BW_CLIENTSECRET" ] && BW_CLIENTSECRET=$(secure_prompt "Enter bitwarden client_secret: ")
  gpg -K --with-keygrip | grep andreas@kruhlmann.dev >/dev/null || GPG_PASSWORD=$(secure_prompt "Enter gpg password: ")
  export BW_USERNAME BW_PASSWD BW_CLIENTSECRET GPG_PASSWORD
}

echo "Logs stored in $LOGDIR"
sudo pacman -Sy >/dev/null
setup_vars
clone_homedir

for file in ./install.d/*.sh; do
  run_install_script "$(basename "$file" .sh)"
done
